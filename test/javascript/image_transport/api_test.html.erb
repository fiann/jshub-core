<% set_title "Image Transport < Data Transport" %>

<% content_for :javascripts do %>  

<!-- jsHub source files -->
<%= javascript_include_tag "/js/src/hub/hub-debug.js" %>
<%= javascript_include_tag "/js/src/debug/debug-debug.js" %>
<%= javascript_include_tag "/js/src/logger/logger-debug.js" %>
<%= javascript_include_tag "/js/src/hub/load-triggers-debug.js" %>
<%= javascript_include_tag "/js/src/image-transport/image-transport-debug.js" %>

<% end %>

<% content_for :intro do %>
<p>
  The <a href=".">image transport test suite</a> tests <strong>data output from the tag
  to servers</strong> using the HTTP GET method.
</p>
<p>
  This page tests the core functionality provided by the hub for sending data to a
  server using a hidden (single pixel) image in the page.
</p>
<% end %>

<script language="javascript" type="text/javascript">
(function() {
	
  var baseUrl = (function() {
    if (window.location.protocol === "file:") {
      return "";
    } else if(navigator.userAgent.match(/Rhino|Envjs/)) {
	  // env.js does not currently normalise the url of images in the page
      return "";
    } else {
      // get the base url of the page, e.g. http://localhost:3000/
      return window.location.href.substring(0, window.location.href.indexOf(window.location.pathname));

    }
  })();

  /* 
   * Check the browser environment for required JS libraries and other 
   * supporting functionality to avoid false test failure results due to 
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({ 
    name : "Environment check",
  
    "test required test dependencies" : function () {
      Y.Assert.isNotUndefined(window.YUI, "The YUI library is required");
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
    },
  
    "test jsHub API dependencies" : function () {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));
  
  // tests for hub events
  suite.add(new Y.Test.Case({
    name: "Image transport",
    
    "test URL is created from base url plus data object": function() {
		var url = '/image-test', data = { field1 : "value1", field2 : "value2" };
        Y.Assert.isFunction(jsHub.dispatchViaImage, "jsHub.dispatchViaImage() is not a Function");
		var img = jsHub.dispatchViaImage(url, data);
		Y.Assert.isNotNull(img, "image object is null");
		var expected = baseUrl + "/image-test?field1=value1&field2=value2";
		Y.Assert.areEqual(expected, img.src, "Image URL is not correct");
    },
	
    "test base url only": function() {
		var url = '/image-test';
        Y.Assert.isFunction(jsHub.dispatchViaImage, "jsHub.dispatchViaImage() is not a Function");
		var img = jsHub.dispatchViaImage(url);
		Y.Assert.isNotNull(img, "image object is null");
		var expected = baseUrl + "/image-test";
		Y.Assert.areEqual(expected, img.src, "Image URL is not correct");
    },
	
    "test null data object": function() {
		var url = '/image-test';
        Y.Assert.isFunction(jsHub.dispatchViaImage, "jsHub.dispatchViaImage() is not a Function");
		var img = jsHub.dispatchViaImage(url, null);
		Y.Assert.isNotNull(img, "image object is null");
		var expected = baseUrl + "/image-test";
		Y.Assert.areEqual(expected, img.src, "Image URL is not correct");
    },
	
    "test data fields are correctly escaped": function() {
		var url = '/image-test', data = { field1 : "value one", "field 2?" : "value2" };
        Y.Assert.isFunction(jsHub.dispatchViaImage, "jsHub.dispatchViaImage() is not a Function");
		var img = jsHub.dispatchViaImage(url, data);
		Y.Assert.isNotNull(img, "image object is null");
		var expected = baseUrl + "/image-test?field1=value%20one&field%202%3F=value2";
		Y.Assert.areEqual(expected, img.src, "Image URL is not correct");
    },
	
    "test query string in base url is preserved": function() {
		var url = '/image-test?inline-data=y', data = { field1 : "value1", field2 : "value2" };
        Y.Assert.isFunction(jsHub.dispatchViaImage, "jsHub.dispatchViaImage() is not a Function");
		var img = jsHub.dispatchViaImage(url, data);
		Y.Assert.isNotNull(img, "image object is null");
		var expected = baseUrl + "/image-test?inline-data=y&field1=value1&field2=value2";
		Y.Assert.areEqual(expected, img.src, "Image URL is not correct");
    },
	
    "test multiple values for same key": function() {
		var url = '/image-test', data = { field1 : ["value1", "value2", 345] };
        Y.Assert.isFunction(jsHub.dispatchViaImage, "jsHub.dispatchViaImage() is not a Function");
		var img = jsHub.dispatchViaImage(url, data);
		Y.Assert.isNotNull(img, "image object is null");
		var expected = baseUrl + "/image-test?field1=value1&field1=value2&field1=345";
		Y.Assert.areEqual(expected, img.src, "Image URL is not correct");
    },
	
    "test undefined field in data": function() {
		var url = '/image-test', data = { field1 : null, field2 : undefined };
        Y.Assert.isFunction(jsHub.dispatchViaImage, "jsHub.dispatchViaImage() is not a Function");
		var img = jsHub.dispatchViaImage(url, data);
		Y.Assert.isNotNull(img, "image object is null");
		var expected = baseUrl + "/image-test";
		Y.Assert.areEqual(expected, img.src, "Image URL is not correct");
    },
	
	/* SOME ERROR CONDITIONS */
	
    "test no data sent if base url is not defined": function() {
      var data = {
        field1: "value1",
        field2: "value2"
      };
      Y.Assert.isFunction(jsHub.dispatchViaImage, "jsHub.dispatchViaImage() is not a Function");
      var img = jsHub.dispatchViaImage(null, data);
      Y.Assert.isNull(img, "image object should be null");
    },
	
    "test object data is not sent": function() {
	  var funct = function () { doStuff() };
      var url = '/image-test', data = {
        field1: "value1",
		funct: funct,
        field2: "value2"
      };
      Y.Assert.isFunction(jsHub.dispatchViaImage, "jsHub.dispatchViaImage() is not a Function");
      var img = jsHub.dispatchViaImage(url, data);
      Y.Assert.isNotNull(img, "image object is null");
      var expected = baseUrl + "/image-test?field1=value1&field2=value2";
      Y.Assert.areEqual(expected, img.src, "Image URL is not correct");
    }	
  }));
})();

  
</script> 
