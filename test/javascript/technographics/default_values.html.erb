<% set_title "Default values < Browser technographics" %>

<% content_for :javascripts do %>  

<!-- jsHub dist file -->
<%= javascript_include_tag "/js/src/hub/hub-debug.js" %>
<%= javascript_include_tag "/js/src/debug/debug-debug.js" %>
<%= javascript_include_tag "/js/src/logger/logger-debug.js" %>
<%= javascript_include_tag "/js/src/hub/load-triggers-debug.js" %>
<%= javascript_include_tag "/js/src/hub/technographics-debug.js" %>

<% end %>

<% content_for :intro do %>
<p>
  The <a href=".">technographics test suite</a> tests <strong>functionality for extracting
  environment data from the user's browser</strong>.
</p>
<p>
  This page tests the the default values of undeclared properties.
</p>
<% end %>


<!-- Any HTML you may require for your tests to work properly -->
<script language="javascript" type="text/javascript">
  /* 
   * Check the browser environment for required JS libraries and other 
   * supporting functionality to avoid false test failure results due to 
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({ 
    name : "Environment check",
  
    "test required test dependencies" : function () {
      Y.Assert.isNotUndefined(window.YUI, "The YUI library is required");
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
    },
  
    "test jsHub API dependencies" : function () {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));
  
  /* 
   * Capture the data from a hPage-found event
   */
  function parse(selector, expectedCount) {
    var data = null, count = 0;
    if (typeof expectedCount != 'number') {
      expectedCount = 1;
    }
    var listener = {
      id : "unittest",
      eventHandler : function(evt) {
    	  count ++;
        data = evt.data;
      }
    };
    jsHub.bind("page-view", listener);
    jsHub.trigger("page-view", { context: selector });
    Y.Assert.areEqual(expectedCount, count, 'wrong number of events fired');
    Y.Assert.isNotNull(data, 'Event had no data');
  	return data;
  };
</script>

<!-- 
     Simple hPage with missing values
  -->
<div id="example1">
  <h2>Example 1: Default values for text fields</h2>
  <div class="hpage">
    <p>Only the name is specified. The title and referrer should be inferred from default 
	  values.</p>
    <ul>
      <li>name: <span class="name">implicit page name value</span>.</li>
	  <li>title: not specified, should be inferred from <code>document.title</code></li>
	  <li>referrer: not specified, should be inferred from <code>document.referrer</code></li>
    </ul>
  </div>
</div>
<script type="text/javascript">
  suite.add(new Y.Test.Case({
    name: "Default text field values",
    
    "test title field": function() {
      var data = parse("#example1");
      Y.Assert.areEqual(document.title, data['page-title']);
    },
	
    "test referrer field": function() {
      var data = parse("#example1");
      Y.Assert.areEqual(document.referrer, data['page-referrer']);
    }
  }));
</script>  

