<% set_title "Default values < Browser technographics" %>

<% content_for :javascripts do %>  

<!-- jsHub dist file -->
<%= javascript_include_tag "/js/src/hub/hub-debug.js" %>
<%= javascript_include_tag "/js/src/debug/debug-debug.js" %>
<%= javascript_include_tag "/js/src/logger/logger-debug.js" %>
<%= javascript_include_tag "/js/src/hub/load-triggers-debug.js" %>
<%= javascript_include_tag "/js/src/hub/technographics-debug.js" %>

<% end %>

<% content_for :intro do %>
<p>
  The <a href=".">technographics test suite</a> tests <strong>functionality for extracting
  environment data from the user's browser</strong>.
</p>
<p>
  This page tests the the default values of undeclared properties.
</p>
<% end %>


<!-- Any HTML you may require for your tests to work properly -->
<script language="javascript" type="text/javascript">
  /* 
   * Check the browser environment for required JS libraries and other 
   * supporting functionality to avoid false test failure results due to 
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({ 
    name : "Environment check",
  
    "test required test dependencies" : function () {
      Y.Assert.isNotUndefined(window.YUI, "The YUI library is required");
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
    },
  
    "test jsHub API dependencies" : function () {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));
  
  // mock object
  function MockListener(authToken) {
    var self = this;
    this.events = [];
    var eventFired = function(evt) {
      self.events.push(evt);
    };
    this.metadata = {
      id : authToken,
      type : "data-capture",
      eventHandler : eventFired
    };
    this.reset = function () {
      self.events = [];
    }
  };
  
  function checkField(expectedValue, fieldName) {
    window.listener = new MockListener("test-listener");
    jsHub.bind("page-view", listener.metadata);
    jsHub.trigger("page-view");
    Y.Assert.areEqual(1, listener.events.length, "Expected a page view event to be fired");
    var data = listener.events[0].data;
    Y.Assert.areEqual(expectedValue, data[fieldName], "Technographic field '" + fieldName + "' was incorrect");
  };

  suite.add(new Y.Test.Case({
    name: "Default technographic values",
    
    "test title": function() {
      checkField(document.title, 'page-title');
    },
	
    "test referrer": function() {
      checkField(document.referrer, 'referrer');
    },

    "test url": function() {
      checkField(window.location.href, 'url');
    },

    "test screen size": function() {
      checkField(screen.width, 'sW');
      checkField(screen.height, 'sH');
    },
    
    "test window size": function() {
      checkField(window.innerWidth, 'wW');
      checkField(window.innerHeight, 'wH');
    },
    
    "test timezone": function() {
      checkField(-((new Date()).getTimezoneOffset()), 'tzOffset');
    }
  }));
</script>  

