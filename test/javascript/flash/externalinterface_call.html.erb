<% set_title "call < External API < Flash" %>

<% content_for :javascripts do %>

<!-- jsHub dist file -->
<%= javascript_include_tag "/js/src/hub/hub-debug.js" %>
<%= javascript_include_tag "/js/src/debug/debug-debug.js" %>
<%= javascript_include_tag "/js/src/logger/logger-debug.js" %>
<%= javascript_include_tag "/js/src/jshub/jshub-debug.js" %>

</script>

<% end %>

<% content_for :intro do %>
<p>
  This file tests <strong><a href="http://www.adobe.com/devnet/flash/articles/external_interface.html" title="Flash External API">Flash External API</a> event listening functionality</strong>.
</p>
<p>
  This page tests that events can be passed from the Flash file to the HTML page and its JavaScript code via an <strong>ExternalInterface call</strong>.
</p>
<% end %>

<script language="javascript" type="text/javascript">
  // mock object to capture events from Flash untill tests can run
  function MockListener(authToken) {
    var self = this;
    self.authToken = authToken;
    self.events = [];
    this.eventFired = function(evt) {
      self.events.push(evt);
    };
  }; 
  // create and bind a listener to flash events
  var listener1 = new MockListener("listener1");
  jsHub.bind("flash:event", listener1.authToken, listener1.eventFired);
</script>

<script language="javascript" type="text/javascript">
  /* 
   * Check the browser environment for required JS libraries and other
   * supporting functionality to avoid false test failure results due to
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({ 
    name : "Environment check",
  
    "test required test dependencies" : function () {
      Y.Assert.isNotUndefined(window.YUI, "The YUI library is required");
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
    },
  
    "test jsHub API dependencies" : function () {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));
    
  suite.add(new Y.Test.Case({
    name: "Flash ExternalInterface call",
    
    _should: {
      ignore: {
        // Flash cannot run in Env.js
        "test data sent directly from flash": (navigator.userAgent.match(/Rhino|Envjs/)),
        "test data sent via jsHub from flash": (navigator.userAgent.match(/Rhino|Envjs/))
      }
    },    
    
    "test data sent directly from flash": function() {

      var test = this;
      
      // subscribe to interesting events
      Y.on('flash:externalinterface:call', function (data) {

        // tell the TestRunner to resume
        test.resume(function () {
          Y.Assert.isNotUndefined(data, "No data recieved from Flash via fscommand2()");
          Y.Assert.areEqual("Hello!", data, "Unexpected data recieved");
        });

      });
      
      this.wait(3000);

    },

    "test data sent via jsHub from flash": function() {
      Y.Assert.areEqual(1, listener1.events.length, "Event should be recorded once");
    }

  }));  
</script>  

<!-- Any HTML you may require for your tests to work properly -->
<div id="example1">

  <% 
    # since paths are duplicated depending on browsers set and use a local variable to avoid bugs
    path_to_swf = '../../../test_assets/vendor/adobe/flash/ExternalInterface_call.swf' 
  %>

  <script type="text/javascript">
    // called directly by Flash
    function callJavascript(str) {
      //alert(str);
      jsHub.logger.warn("Flash ExternalInterface call: " +str);

      // resume Test after a delay
      setTimeout(function() {Y.fire('flash:externalinterface:call', str)}, 1000);

      // return value is sent back to Flash
      return "ExternalInterface is a new Flash Player 8 API.";
    }
  </script>

  <!--url's used in the movie-->
  <!--text used in the movie-->
  <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,0" width="550" height="400" id="ExternalInterface_call" align="middle">
    <param name="allowScriptAccess" value="always" />
    <param name="movie" value="<%= path_to_swf %>" />
    <param name="quality" value="high" />
    <param name="bgcolor" value="#ffffff" />
    <embed src="<%= path_to_swf %>" quality="high" bgcolor="#ffffff" width="550" height="400" name="ExternalInterface_call" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" />
  </object>

<p>Actionscript 2.0 source</p>
<pre class="brush actionscript;">
// duplicate API for calls from within Flash
import flash.external.*;
var jsHub = new Object;
jsHub.trigger = function (eventName, data) {
  ExternalInterface.call("jsHub.trigger", eventName, data).toString();
}
</pre>

</div>

