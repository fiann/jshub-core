<% set_title "hProduct parsing < Microformat Parser" %>

<% content_for :javascripts do %>  

<!-- jsHub source files -->
<%= javascript_include_tag "jquery/jquery.js" %>
<%= javascript_include_tag "/js/src/hub/hub-debug.js" %>
<%= javascript_include_tag "/js/src/debug/debug-debug.js" %>
<%= javascript_include_tag "/js/src/logger/logger-debug.js" %>
<%= javascript_include_tag "/js/src/microformats/microformats-api-debug.js" %>
<%= javascript_include_tag "/js/src/microformats/hproduct-capture-debug.js" %>
<%= javascript_include_tag "/js/src/jshub/jshub-debug.js" %>

<% end %>

<% content_for :intro do %>
<p>
  The <a href="..">test suite</a> tests the <strong><a href="http://jshub.org/trac/wiki/hProduct/parser" 
    title="hProduct parser specification">hProduct parser implementation</a></strong>.
</p>
<p>
  This page tests that events are generated in the correct sequence. If a product view event occurs as
  the result of a page view, then the product view event should contain the same timestamp as the
  page view.
</p>
<% end %>

<!-- Any HTML you may require for your tests to work properly -->
<script language="javascript" type="text/javascript">
  /* 
   * Check the browser environment for required JS libraries and other 
   * supporting functionality to avoid false test failure results due to 
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({ 
    name : "Environment check",
  
    "test required test dependencies" : function () {
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
      Y.Assert.isNotUndefined(window.jQuery, "The jQuery library is required");
      Y.Assert.isFunction($('html').getMicroformatPropertyValue, "$.getMicroformatPropertyValue() is not a function");
    },
  
    "test jsHub API dependencies" : function () {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));
</script>
  
<!-- 
     Standard, well formed, hProduct
  -->
<div id="example1">
  <div class="hproduct">
    Example 1: A minimal hProduct declaration:
    <ul>
      <li>fn: required field, value is <span class="fn">Product name</span></li>
    </ul>
  </div>
</div>
<script type="text/javascript">
  suite.add(new Y.Test.Case({ 
    name : "Event sequence",

    "test product view timestamp matches page view" : function () {
      var timestamp = new Date().getTime(), pageView = null, productView = null, count = 0;
      jsHub.bind("page-view", "unittest", function(evt) {
        pageView = evt;
        count++;
      });
      jsHub.bind("product-view", "unittest", function(evt) {
        productView = evt;
        count++;
      });
      jsHub.trigger("page-view", { context: "#example1" }, timestamp);
      Y.Assert.areEqual(2, count, 'Wrong number of events have been generated');
	  Y.Assert.areEqual(timestamp, pageView.timestamp, "Page view event has wrong timestamp");
	  Y.Assert.areEqual(timestamp, productView.timestamp, "Product view event has wrong timestamp");
    },

    "test product view timestamp matches content updated" : function () {
      var timestamp = new Date().getTime(), pageView = null, productView = null, count = 0;
      jsHub.bind("content-updated", "unittest", function(evt) {
        pageView = evt;
        count++;
      });
      jsHub.bind("product-view", "unittest", function(evt) {
        productView = evt;
        count++;
      });
      jsHub.trigger("content-updated", { context: "#example1" }, timestamp);
      Y.Assert.areEqual(2, count, 'Wrong number of events have been generated');
	  Y.Assert.areEqual(timestamp, pageView.timestamp, "Page view event has wrong timestamp");
	  Y.Assert.areEqual(timestamp, productView.timestamp, "Product view event has wrong timestamp");
    },

    "test product view timestamp is autogenerated when not specified" : function () {
      var productView = null, count = 0;
      jsHub.bind("product-view", "unittest", function(evt) {
        productView = evt;
        count++;
      });
      jsHub.trigger("page-view", { context: "#example1" });
      Y.Assert.areEqual(1, count, 'Wrong number of events have been generated');
      Y.Assert.isNumber(productView.timestamp, 'Product view event had no timestamp');
    }
  }));
</script> 
