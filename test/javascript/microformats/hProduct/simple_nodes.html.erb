<% set_title "hProduct parsing < Microformat Parser" %>

<% content_for :javascripts do %>  

<!-- jsHub source files -->
<%= javascript_include_tag "jquery/jquery.js" %>
<%= javascript_include_tag "/js/src/hub/hub-debug.js" %>
<%= javascript_include_tag "/js/src/debug/debug-debug.js" %>
<%= javascript_include_tag "/js/src/logger/logger-debug.js" %>
<%= javascript_include_tag "/js/src/microformats/microformats-api-debug.js" %>
<%= javascript_include_tag "/js/src/microformats/hproduct-capture-debug.js" %>
<%= javascript_include_tag "/js/src/jshub/jshub-debug.js" %>

<% end %>

<% content_for :intro do %>
<p>
  The <a href="..">test suite</a>  tests the <strong><a href="http://jshub.org/trac/wiki/hProduct/parser" 
    title="hProduct parser specification">parser implementation</a> for the 
	<a href="http://microformats.org/wiki/hproduct" title="hProduct microformat specification">hProduct 
	microformat</a></strong>.
</p>
<p>
  This page tests the rules for determining the value of a property (value excerpting) and the 
  default values of undeclared properties.
</p>
<% end %>

<!-- Any HTML you may require for your tests to work properly -->
<script language="javascript" type="text/javascript">
  /* 
   * Check the browser environment for required JS libraries and other 
   * supporting functionality to avoid false test failure results due to 
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({ 
    name : "Environment check",
  
    "test required test dependencies" : function () {
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
      Y.Assert.isNotUndefined(window.jQuery, "The jQuery library is required");
      Y.Assert.isFunction($('html').getMicroformatPropertyValue, "$.getMicroformatPropertyValue() is not a function");
    },
  
    "test jsHub API dependencies" : function () {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));

  // tests for hProduct parser
  suite.parse = function(selector) {
    var data = null, count = 0;
    jsHub.bind("product-view", "unittest", function(evt) {
      data = evt.data;
      count++;
    });
    jsHub.trigger("page-view", {
      context: selector
    });
    Y.Assert.areEqual(1, count, 'wrong number of product view events have been generated');
    Y.Assert.isNotNull(data, 'product view event had no data');
	return data;
  };  
</script>
  
<!-- 
     Standard, well formed, hProduct
  -->
<div id="example1">
  <div class="hproduct">
    Example 1: Only the required hProduct properties are set:
    <ul>
      <li>fn: required field, value is <span class="fn">Product name</span></li>
    </ul>
  </div>
</div>
<div id="example2">
  <div class="hproduct">
    Example 2: All hProduct properties are set, as per <%= link_to 'hProduct spec', 'http://microformats.org/wiki/hproduct#Schema' %>.
    <ul>
      <li>fn: required field, value is <span class="fn">hProduct parser</span></li>
      <li>brand: optional field, value is <span class="brand">jsHub</span></li>
      <li>category: optional field, value is <span class="category">parser</span></li>
      <li>price: optional field, value is <span class="price">12.99</span></li>
      <li>description: optional field, value is <span class="description">microformat parser for hProduct</span></li>
      <li>photo: optional field, value is <%= image_tag 'javascript_test/microformats.gif', :class => 'photo' %></li>
      <li>url: optional field, value is <a class="url" rel="product" href="product.html">full product details</a></li>
      <li>identifier: optional field, value is 
	    <span class="identifier"><span class="type">SKU</span>: <span class="value">12345678</span></span></li>
    </ul>
  </div>
</div>
<script type="text/javascript">
  suite.add(new Y.Test.Case({ 
    name : "Core microformat parsing",

    "test minimal hProduct declaration" : function () {
      var data = suite.parse("#example1");
      Y.Assert.areEqual("Product name", data['product-name'], 'product name is not the same as the declaration');
    },

    "test brand is captured" : function () {
      var data = suite.parse("#example2");
      Y.Assert.areEqual("jsHub", data['product-brand'], 'brand is not the same as the declaration');
    },

    "test category is captured" : function () {
      var data = suite.parse("#example2");
      Y.Assert.areEqual("parser", data['product-category'], 'category is not the same as the declaration');
    },

    "test description is captured" : function () {
      var data = suite.parse("#example2");
      Y.Assert.areEqual("microformat parser for hProduct", data['product-description'], 'description is not the same as the declaration');
    },

    "test product name is captured" : function () {
      var data = suite.parse("#example2");
      Y.Assert.areEqual("hProduct parser", data['product-name'], 'product name is not the same as the declaration');
    },

    "test photo is captured" : function () {
      var data = suite.parse("#example2");
      Y.Assert.isTrue(/microformats.gif/.test(data['product-photo']), 'photo is not the same as the declaration');
    },

    "test product url is captured" : function () {
      var data = suite.parse("#example2");
      Y.Assert.isTrue(/product.html/.test(data['product-url']), 'URL is not the same as the declaration');
    }
  }));
</script> 

<div id="example3">
  <div class="hproduct">
    Example 3: No hProduct properties are set:
    <ul>
      <li>fn: required field, not present</li>
      <li>price: optional field, not present</li>
    </ul>
  </div>
</div>
<script type="text/javascript">
  suite.add(new Y.Test.Case({ 
    name : "Missing value parsing",

    // we still send the event even if it is not well-formed, and the server
	// sends back an error message	
    "test product view is generated when required fields are missing" : function () {
      var data = suite.parse("#example3");
      Y.Assert.isUndefined(data['product-name'], 'product name is not specified, it should not be present');
    }
  }));
</script>


<script type="text/javascript">
  suite.add(new Y.Test.Case({ 
    name : " value parsing",

    // we still send the event even if it is not well-formed, and the server
	// sends back an error message	
    "test product view is generated when required fields are missing" : function () {
      var data = suite.parse("#example3");
      Y.Assert.isUndefined(data['product-name'], 'product name is not specified, it should not be present');
    }
  }));
</script>
