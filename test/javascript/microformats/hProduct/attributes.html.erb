<% set_title "hProduct parsing < Microformat Parser" %>

<% content_for :javascripts do %>  

<!-- jsHub source files -->
<%= javascript_include_tag "jquery/jquery.js" %>
<%= javascript_include_tag "/js/src/hub/hub-debug.js" %>
<%= javascript_include_tag "/js/src/debug/debug-debug.js" %>
<%= javascript_include_tag "/js/src/logger/logger-debug.js" %>
<%= javascript_include_tag "/js/src/microformats/microformats-api-debug.js" %>
<%= javascript_include_tag "/js/src/microformats/hproduct-capture-debug.js" %>
<%= javascript_include_tag "/js/src/jshub/jshub-debug.js" %>

<% end %>

<% content_for :intro do %>
<p>
  The <a href="..">test suite</a>  tests the <strong><a href="http://jshub.org/trac/wiki/hProduct/parser" 
    title="hProduct parser specification">parser implementation</a> for the 
    <a href="http://microformats.org/wiki/hproduct" title="hProduct microformat specification">hProduct 
    microformat</a></strong>.
</p>
<p>
  This page tests the rules for determining the values of custom attributes, which are not part 
  of the hProduct specification, but are defined according to the same rules as the hPage specification.
</p>
<% end %>

<!-- Any HTML you may require for your tests to work properly -->
<script language="javascript" type="text/javascript">
  /* 
   * Check the browser environment for required JS libraries and other
   * supporting functionality to avoid false test failure results due to
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({
    name : "Environment check",
    
    "test required test dependencies" : function() {
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
      Y.Assert.isNotUndefined(window.jQuery, "The jQuery library is required");
      Y.Assert.isFunction($('html').getMicroformatPropertyValue, "$.getMicroformatPropertyValue() is not a function");
    },
    
    "test jsHub API dependencies" : function() {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));
  
  // tests for hProduct parser
  function parse(selector) {
    var data = null, count = 0;
    var listener = {
      id : "unittest",
      eventHandler : function(evt) {
        data = evt.data;
        count++;
      }
    };
    jsHub.bind("product-view", listener);
    jsHub.trigger("page-view", {
      context : selector
    });
    Y.Assert.areEqual(1, count, 'wrong number of product view events have been generated');
    Y.Assert.isNotNull(data, 'product view event had no data');
    return data;
  };
</script>
  
<!-- 
     Standard, well formed, hPage
  -->
<div id="example1">
  <h2>Example 1: single attribute</h2>
  <div class="hproduct">
    The hProduct contains a single attribute:
    <ul>
      <li>name: <span class="fn">required field</span>.</li>
      <li class="attribute"><span class="type">size</span><span class="value">large</span></li>
    </ul>
  </div>
</div>
<div id="example2">
  <h2>Example 2: single attribute embedded in html</h2>
  <div class="hproduct">
    The hPage contains a single attribute, with html surrounding and between the value elements.
      The values extracted should be identical to the previous example:
    <ul>
      <li>name: <span class="fn">required field</span>.</li>
      <li class="attribute">Your product <strong><span class="type">size</span> is 
        <span class="value">large</span></strong>.</li>
    </ul>
  </div>
</div>
<div id="example3">
  <h2>Example 3: reverse order of subnodes</h2>
  <div class="hproduct">
    The hPage contains a single attribute, with html surrounding and between the value elements.
    The value appears before the type.
    The values extracted should be identical to the previous example:
    <ul>
      <li>name: <span class="fn">required field</span>.</li>
      <li class="attribute">Your <span class="value">large</span> <span class="type">size</span> 
        has been applied.</li>
    </ul>
  </div>
</div>
<script type="text/javascript">
  suite.add(new Y.Test.Case({
    name: "Simple value class extraction",
    
    "test value class extraction": function() {
      var data = parse("#example1");
        Y.Assert.isObject(data.attributes, "No attributes found");
      Y.Assert.areEqual(1, Y.Object.keys(data.attributes).length, "One attribute specified");
      Y.ObjectAssert.ownsKey('size', data.attributes);
      Y.Assert.areEqual('large', data.attributes['size'], "Attribute value");
    },
    
    "test value class extraction from html": function() {
      var data = parse("#example2");
      Y.Assert.isObject(data.attributes, "No attributes found");
      Y.Assert.areEqual(1, Y.Object.keys(data.attributes).length, "One attribute specified");
      Y.ObjectAssert.ownsKey('size', data.attributes);
      Y.Assert.areEqual('large', data.attributes['size'], "Attribute value");
    },
    
    "test value class extracting is order independent": function() {
      var data = parse("#example1");
        Y.Assert.isObject(data.attributes, "No attributes found");
      Y.Assert.areEqual(1, Y.Object.keys(data.attributes).length, "One attribute specified");
      Y.ObjectAssert.ownsKey('size', data.attributes);
      Y.Assert.areEqual('large', data.attributes['size'], "Attribute value");
    }
  }));
</script>  

<!-- 
    Do not look inside .value nodes, the parser should treat grandchild .value nodes
      as opaque html
  -->
<div id="example4">
  <h2>Example 4: .value node nested inside value</h2>
  <div class="hproduct">
    The hPage contains a single attribute, with a single value. There is a node with class value
      inside the value node, but this should be treated as html not as a value instance:
    <ul>
      <li>name: <span class="name">required field</span>.</li>
      <li class="attribute">Your <strong><span class="type">size</span> 
        <span class="value">large <span class="value">%</span></span></strong> product is available.</li>
    </ul>
  </div>
</div>
<script type="text/javascript">
/* <![CDATA[  // this script contains html, so escape it for Rhino parser */
  suite.add(new Y.Test.Case({
    name: "Nested value classes",
    
    "test nested value classes are ignored": function() {
      var data = parse("#example4");
      Y.Assert.isObject(data.attributes, "No attributes found");
      Y.Assert.areEqual(1, Y.Object.keys(data.attributes).length, "One attribute specified");
      Y.ObjectAssert.ownsKey('size', data.attributes);
      // IE gives UpperCase HTML tag names and optional '"'s is required as this is how IE represents the DOM
      Y.Assert.isTrue(/large <(SPAN|span) class=(")?value(")?\s*>%<\/(SPAN|span)>/.test(data.attributes['size']), "Attribute value: "+data.attributes['size'].replace("<", "&lt;"));
    }
  }));
// ]]>
</script> 

<!-- 
      Implicit values
  -->
<div id="example5">
  <h2>Example 5: No type node</h2>
  <div class="hproduct">
    When the attribute does not contain a type, the whole content is considered to be the type
    and the value is the default of 'true':
    <ul>
      <li>name: <span class="name">required field</span>.</li>
      <li class="attribute">size</li>
    </ul>
  </div>
</div>
<div id="example6">
  <h2>Example 6: Type node but no value</h2>
  <div class="hproduct">
    The attribute contains a type, but the value is not specified, so it takes the default of 'true':
    <ul>
      <li>name: <span class="name">required field</span>.</li>
      <li class="attribute">Product <span class="type">size</span> not specified.</li>
    </ul>
  </div>
</div>
<script type="text/javascript">
  suite.add(new Y.Test.Case({
    name: "Implicit default value",
    
    "test unspecified type": function() {
      var data = parse("#example5");
      Y.Assert.isObject(data.attributes, "No attributes found");
      Y.Assert.areEqual(1, Y.Object.keys(data.attributes).length, "One attribute specified");
      Y.ObjectAssert.ownsKey('size', data.attributes);
      Y.Assert.areEqual('true', data.attributes['size'], "Default attribute value");
    },
    
    "test unspecified value": function() {
      var data = parse("#example6");
      Y.Assert.isObject(data.attributes, "No attributes found");
      Y.Assert.areEqual(1, Y.Object.keys(data.attributes).length, "One attribute specified");
      Y.ObjectAssert.ownsKey('size', data.attributes);
      Y.Assert.areEqual('true', data.attributes['size'], "Default attribute value");
    }
  }));
</script>

<!-- 
      Multiple values
  -->
<div id="example7">
  <h2>Example 7: Multiple attribute declarations</h2>
  <div class="hproduct">
    An attribute can have multiple values for the same type.
    <ul>
      <li>name: <span class="name">required field</span>.</li>
      <li class="attribute"><span class="type">sports</span>: <span class="value">rugby</span>.</li>
      <li class="attribute"><span class="type">sports</span>: <span class="value">football</span>.</li>
      <li class="attribute"><span class="type">sports</span>: <span class="value">tennis</span>.</li>
    </ul>
  </div>
</div>
<div id="example8">
  <h2>Example 8: multiple values for nodes attribute</h2>
  <div class="hproduct">
    An attribute can have multiple value nodes within a single declaration. This format is
    equivalent to the previous example.
    <ul>
      <li>name: <span class="name">required field</span>.</li>
      <li class="attribute">Your <span class="type">sports</span> are 
        <span class="value">rugby</span>, <span class="value">football</span>
        and <span class="value">tennis</span>.</li>
    </ul>
  </div>
</div>
<div id="example9">
  <h2>Example 9: Duplicate values</h2>
  <div class="hproduct">
    <p>If an attribute has duplicate declarations where the name and value are both identical,
      then the duplicates should be removed to leave the unique set.</p> 
    <ul>
      <li>name: <span class="name">required field</span>.</li>
      <li class="attribute"><span class="type">sports</span>: <span class="value">rugby</span>.</li>
      <li class="attribute"><span class="type">sports</span>: <span class="value">football</span>.</li>
      <li class="attribute"><span class="type">sports</span>: <span class="value">rugby</span>.</li>
    </ul>
  </div>
</div>
<script type="text/javascript">
/* <![CDATA[  // this script contains ampersands, so escape it for Rhino parser */
  suite.add(new Y.Test.Case({
    name: "Multiple attribute values",
    
    "test multiple values declared separately": function() {
      var data = parse("#example7");
      Y.Assert.isObject(data.attributes, "No attributes found");
      Y.Assert.areEqual(1, Y.Object.keys(data.attributes).length, "One attribute specified");
      Y.ObjectAssert.ownsKey('sports', data.attributes);
      var expectedValues = ["rugby", "football", "tennis"];
      Y.ArrayAssert.itemsAreEqual(expectedValues, data.attributes['sports']);
    },
    
    "test multiple values in one node": function() {
      var data = parse("#example8");
      Y.Assert.isObject(data.attributes, "No attributes found");
      Y.Assert.areEqual(1, Y.Object.keys(data.attributes).length, "One attribute specified");
      Y.ObjectAssert.ownsKey('sports', data.attributes);
      var expectedValues = ["rugby", "football", "tennis"];
      Y.ArrayAssert.itemsAreEqual(expectedValues, data.attributes['sports']);
    },
    
    "test duplicate values": function() {
      var data = parse("#example9");
      Y.Assert.isObject(data.attributes, "No attributes found");
      Y.Assert.areEqual(1, Y.Object.keys(data.attributes).length, "One attribute specified");
      Y.ObjectAssert.ownsKey('sports', data.attributes);
      var expectedValues = ["rugby", "football"];
      Y.ArrayAssert.itemsAreEqual(expectedValues, data.attributes['sports']);
    }
  }));
  // ]]>
</script>

<!-- 
      Invalid attributes
  -->
<div id="example10">
  <h2>Example 10: Multiple type nodes</h2>
  <div class="hproduct">
    When the attribute contains more than one type, the attribute is not valid as the value cannot
      be assigned to a single type:
    <ul>
      <li>name: <span class="name">required field</span>.</li>
      <li class="attribute">Your <span class="type">discount</span> and 
        <span class="type">staff reduction</span> of <span class="value">10%</span>
        have been applied.</li>
    </ul>
  </div>
</div>
<div id="example11">
  <h2>Example 11: Empty attribute</h2>
  <div class="hproduct">
    If the entire attribute node is empty, the attribute is invalid because a type cannot be
      inferred from the whole node contents.
    <ul>
      <li>name: <span class="name">required field</span>.</li>
      <li class="attribute"></li>
    </ul>
  </div>
</div>
<script type="text/javascript">
  suite.add(new Y.Test.Case({
    name: "Invalid attributes",
    
    "test multiple type instances": function() {
      var data = parse("#example10");
      Y.Assert.isUndefined(data.attributes, "No attributes should be found");
    },
    
    "test empty attribute node": function() {
      var data = parse("#example11");
      Y.Assert.isUndefined(data.attributes, "No attributes should be found");
    }
  }));
</script>
