<% set_title "Date and URI utilities < Libraries" %>

<% content_for :javascripts do %>  

<!-- jsHub dist file -->
<%= javascript_include_tag "/js/src/hub/hub-debug.js" %>
<%= javascript_include_tag "/js/src/debug/debug-debug.js" %>
<%= javascript_include_tag "/js/src/logger/logger-debug.js" %>
<%= javascript_include_tag "/js/src/hub/utils-debug.js" %>

<% end %>

<% content_for :intro do %>
<p>This file tests the URI parsing utilities provided by jsHub.</p>
<% end %>

<script language="javascript" type="text/javascript">  
  /* 
   * Check the browser environment for required JS libraries and other 
   * supporting functionality to avoid false test failure results due to 
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({ 
    name : "Environment check",
  
    "test required test dependencies" : function () {
      Y.Assert.isNotUndefined(window.YUI, "The YUI library is required");
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
    },
  
    "test jsHub API dependencies" : function () {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));
  
  suite.add(new Y.Test.Case({
    name: "Core utility functions",
    
    "test each with array": function () {
      var array = ["one", "two", "three"], values = [], indexes = [];
      // add a bogus key to ensure it is being parsed as an array, not an object
      array.bogus = 'fake';
      jsHub.util.each(array, function (value, idx) {
        values.push(value);
        indexes.push(idx);
      });
      Y.ArrayAssert.itemsAreEqual(["one", "two", "three"], values, 
        "Array values were not correct");
      Y.ArrayAssert.itemsAreEqual([0, 1, 2], indexes, "Array indexes were not correct");
    },
    
    "test each with empty array": function () {
      var called = false;
      jsHub.util.each([], function (value, idx) {
        called = true;
      });
      Y.Assert.isFalse(called, "Iterator function should not be called");
    },
    
    "test each with null": function () {
      var called = false;
      jsHub.util.each(null, function (value, idx) {
        called = true;
      });
      Y.Assert.isFalse(called, "Iterator function should not be called");
    },
    
    "test each with non array": function () {
      var called = false;
      jsHub.util.each("string", function (value, idx) {
        called = true;
      });
      Y.Assert.isFalse(called, "Iterator function should not be called");
    },

    "test each with object": function () {
      var keys = [], values = [], object = { "one": 1, "two": 2, "three": 3 };
      jsHub.util.each(object, function (value, key) {
        keys.push(key);
        values.push(value);
      });
      Y.ArrayAssert.itemsAreEqual(["one", "two", "three"], keys, 
        "Object keys were not correct");
      Y.ArrayAssert.itemsAreEqual([1, 2, 3], values, "Array values were not correct");
    }
    

  }));
  

  suite.add(new Y.Test.Case({
    name: "HREF and URI parsing",
    
    "test qualify HREF": function() {
    
      /*
       * Will not always be run as localhost.
       * If port 80 is explicitly used browsers suppress the display in the URL
       * so this is ignored. Other ports are fine, e.g. 8080 etc
       * May need ammending dependent on the path, but that replicated the fnctionality in the test.
       * 
       * TODO this does not run properly in env.js with the file: protocol
       */
      var server = window.location.protocol + "//" + window.location.hostname;
      if (window.location.port && window.location.port !== '80') {
        server += ":" + window.location.port;
      }

      /*
       * Application Prefix expected for relative links.
       */
      var appPrefix = "<%= url_for(root_url(:only_path => true)).chomp('/') %>";
      
      /*
       * Base URL expected for relative links. May not be correct if routes.rb changes.
       */
      var baseURL = "/test/javascript/hub/";
      
      // Root relative
      var href = "/index.html";
      var uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + "/index.html", uri);
      
      href = "/somewhere/index.html";
      uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + "/somewhere/index.html", uri);
      
      href = "/somewhere/else/index.html";
      uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + "/somewhere/else/index.html", uri);
      
      // Page relative
      href = "index.html";
      uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + appPrefix + baseURL + "index.html", uri);
      
      href = "somewhere/index.html";
      uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + appPrefix + baseURL + "somewhere/index.html", uri);
      
      href = "somewhere/else/index.html";
      uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + appPrefix + baseURL + "somewhere/else/index.html", uri);
      
      href = "./index.html";
      uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + appPrefix + baseURL + "index.html", uri);
      
      href = "../index.html";
      uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + appPrefix + "/test/javascript/index.html", uri);
      
      href = "../../index.html";
      uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + appPrefix + "/test/index.html", uri);
      
      href = "../somewhere/index.html";
      uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + appPrefix + "/test/javascript/somewhere/index.html", uri);
      
      href = "../somewhere/else/index.html";
      uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + appPrefix + "/test/javascript/somewhere/else/index.html", uri);
      
      href = "../../somewhere/index.html";
      uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + appPrefix + "/test/somewhere/index.html", uri);
      
      href = "../../somewhere/else/index.html";
      uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + appPrefix + "/test/somewhere/else/index.html", uri);
      
      href = "somewhere/else/../../index.html";
      uri = jsHub.util.qualifyHREF(href);
      Y.Assert.areSame(server + appPrefix + baseURL + "somewhere/else/../../index.html", uri);
      
    }
  
  }));
</script>
