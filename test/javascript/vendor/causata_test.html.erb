<% set_title "Causata < Data transport" %>

<% content_for :javascripts do %>

<!-- jsHub dist file -->
<%= javascript_include_tag "/js/src/hub/hub-debug.js" %>
<%= javascript_include_tag "/js/src/debug/debug-debug.js" %>
<%= javascript_include_tag "/js/src/logger/logger-debug.js" %>
<%= javascript_include_tag "/js/src/lib/json2.js" %>
<%= javascript_include_tag "/js/src/vendor-causata/causata-transport-debug.js" %>
<%= javascript_include_tag "/js/src/hub/load-triggers-debug.js" %>

<% end %>

<% content_for :intro do %>
<p>
  This file tests <strong><a href="http://www.causata.com/" title="Causata">Causata
  data logging plugin</a> functionality to a server via a form POST request</strong>.
</p>
<p>
  This plugin should capture page view and product view events, and ignore other event types.
</p>
<p>
  See the <%= link_to 'Causata wireformat documentation', 'https://intra.causata.com/code/causata/wiki/JavascriptTag/WireFormat' %>
  for more information
</p>
<% end %>

<script language="javascript" type="text/javascript">
  /*
   * Check the browser environment for required JS libraries and other
   * supporting functionality to avoid false test failure results due to
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({
    name: "Environment check",

    "test required test dependencies": function() {
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
    },

    "test jsHub API dependencies": function() {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.configure, "jsHub.configure() is not a Function");
      Y.Assert.isNotUndefined(jsHub.json, "jsHub.json is not defined");
      Y.Assert.isFunction(jsHub.json.stringify, "jsHub.json.stringify() is not a function");
    },
    
    "test Causata plugin initialized": function() {
      var found = false, i, plugins = jsHub.getPluginInfo();
      for (i = 0; i < plugins.length; i++) {
        if (plugins[i].id === 'causata-transport' && /Causata/.test(plugins[i].name)) {
          found = true;
          break;
        }
      }
      Y.Assert.isTrue(found, "Causata plugin has not been registered");
      
      // Configuration for Causata transport plugin
      jsHub.configure('causata-transport', {
        server: "test.causata.com",
        account: "1234"
      });
    }
  }));
</script>

<!-- Any HTML you may require for your tests to work properly -->
<div id="example1">
</div>
<script language="javascript" type="text/javascript">
  // tests for hub events
  suite.attributeComparator = function (one, two) {
    if (two.name === one.name && two.value === one.value) {
      return true;
    }
    throw new Y.Assert.ComparisonFailure("Event attributes are not correct", 
      /* expected */ "data["+one.name+"] = '"+one.value+"'",
      /* actual */   "data["+two.name+"] = '"+two.value+"'");
  };
  
  /**
   * Validate a request that has been received.
   */
  suite.checkRequest = function (expectedParams, expectedEvents, actualRequest) {
    Y.Assert.isObject(actualRequest, "No request sent");
    // check request parameters
    expectedParams = expectedParams || {
      "sender" : /^Causata Transport Plugin v[0-9\.]+$/      
    };
    for (var param in expectedParams) {
      Y.ObjectAssert.ownsKey(param, actualRequest, "Request is missing parameter " + param);
      if (expectedParams[param].constructor === RegExp) {
        if (! expectedParams[param].test(actualRequest[param])) {
          throw new Y.Assert.ComparisonFailure("No regexp match for request parameter '" + param + "'", 
            /* expected */ expectedParams[param],
            /* actual */   actualRequest[param]);
        }
      } else {
        Y.Assert.areEqual(expectedParams[param], actualRequest[param], "Incorrect value for " + param);
      }
    }
    for (param in actualRequest) {
      if (param !== "event") {
        Y.ObjectAssert.ownsKey(param, expectedParams, "Unexpected request parameter " + param);
      }
    }
    // check event properties
    if (! Y.Lang.isArray(actualRequest.event)) {
      actualRequest.event = [ actualRequest.event ];
    }
    if (! Y.Lang.isArray(expectedEvents)) {
      expectedEvents = [ expectedEvents ];
    }
    Y.Assert.areEqual(expectedEvents.length, actualRequest.event.length, "Wrong number of events");
    for (var evt = 0; evt < expectedEvents.length; evt++) {
      var eventData = Y.JSON.parse(actualRequest.event[evt]);
      var expectedEvent = expectedEvents[evt];
      for (var field in expectedEvent) {
        Y.ObjectAssert.ownsKey(field, eventData, "Event " + evt + " is missing field " + field);
        if (field !== "attributes") {
          Y.Assert.areEqual(expectedEvent[field], eventData[field], "Event " + evt + " has incorrect value for " + field);
        }
      }
      if (expectedEvent.attributes) {
        Y.ArrayAssert.itemsAreEquivalent(expectedEvent.attributes, eventData.attributes, suite.attributeComparator);
      }
    }
  };
  
  suite.add(new Y.Test.Case({
    name: "Data dispatch",

    "test page view events are dispatched": function() {
      // override the default method with a Mock implementation
      Y.Mock.expect(jsHub, {
        method : "dispatchViaForm",
        args : [ Y.Mock.Value.String, Y.Mock.Value.String, Y.Mock.Value.Object ]
      });
      jsHub.trigger("page-view", {});
      Y.Mock.verify(jsHub);
    },

    "test http method": function() {
      // override the default method with a Mock implementation
      Y.Mock.expect(jsHub, {
        method : "dispatchViaForm",
        args : [ "POST", Y.Mock.Value.String, Y.Mock.Value.Object ]
      });
      jsHub.trigger("page-view", {});
      Y.Mock.verify(jsHub);
    },

    "test server url is correctly configured": function() {
      // override the default method with a Mock implementation
      Y.Mock.expect(jsHub, {
        method : "dispatchViaForm",
        args : [ Y.Mock.Value.String, "http://test.causata.com", Y.Mock.Value.Object ]
      });
      jsHub.trigger("page-view", {});
      Y.Mock.verify(jsHub);
    },

    "test event properties are converted to Causata API format": function() {
      var recordedData, timestamp = new Date().getTime();
      jsHub.dispatchViaForm = function (method, url, data) {
        recordedData = data;
      };
      jsHub.trigger("page-view", {
          "page-name" : "homepage"
        }, timestamp);
      var expectedEvent = {
        "eventType" : "page-view",
        "timestamp" : timestamp,
        "attributes" : [
          { "name" : "page-name", "value" : "homepage" }
        ]
      };
      suite.checkRequest(null, expectedEvent, recordedData);
    },

    "test url and referrer are pulled up to request param": function() {
      var recordedData, timestamp = new Date().getTime();
      jsHub.dispatchViaForm = function (method, url, data) {
        recordedData = data;
      };
      jsHub.trigger("page-view", {
          "page-name" : "homepage",
          "url" : "http://www.causata.com/",
          "referrer" : "http://www.google.com/"
        }, timestamp);
      var expectedParams = {
        "sender" : /^Causata Transport Plugin v[0-9\.]+$/,
        "url" : "http://www.causata.com/",
        "referrer" : "http://www.google.com/"        
      };
      var expectedEvent = {
        "eventType" : "page-view",
        "timestamp" : timestamp,
        "attributes" : [
          { "name" : "page-name", "value" : "homepage" } 
          // but not url or referrer
        ]
      };
      suite.checkRequest(expectedParams, expectedEvent, recordedData);
    },

    "test organizationID is set correctly": function() {
      var recordedData, timestamp = new Date().getTime(), account = 12345;
      jsHub.dispatchViaForm = function (method, url, data) {
        recordedData = data;
      };
      jsHub.configure("causata-transport.account", account);
      jsHub.trigger("page-view", {}, timestamp);
      var expectedEvent = {
        "eventType" : "page-view",
        "timestamp" : timestamp,
        "organization" : account
      };
      suite.checkRequest(null, expectedEvent, recordedData);
    },

    "test multiple value properties are sent as separate entries" : function() {
      var recordedData, timestamp = new Date().getTime();
      jsHub.dispatchViaForm = function (method, url, data) {
        recordedData = data;
      };
      jsHub.trigger("page-view", {
          "page-name" : "homepage",
          "page-category" : [ "value 1", "value 2" ]
        }, timestamp);
      var expectedEvent = {
        "eventType" : "page-view",
        "timestamp" : timestamp,
        "attributes" : [
          { "name" : "page-name", "value" : "homepage" },
          { "name" : "page-category", "value" : "value 1" },
          { "name" : "page-category", "value" : "value 2" }
        ]
      };
      suite.checkRequest(null, expectedEvent, recordedData);
    },

    "test attribute is not sent if no attributes set" : function() {
      var recordedData, timestamp = new Date().getTime();
      jsHub.dispatchViaForm = function (method, url, data) {
        recordedData = data;
      };
      var eventData = { };
      var expectedData = {
        "eventType" : "page-view",
        "timestamp" : timestamp
      };
      jsHub.trigger("page-view", eventData, timestamp);
      Y.Assert.isObject(recordedData, "No event data sent");
      var data = Y.JSON.parse(recordedData.event);
      for (var field in expectedData) {
        Y.ObjectAssert.ownsKey(field, data, "Data is missing field " + field);
      }
      Y.Assert.isUndefined(data.attributes, "No attributes should be sent if empty");
    },

    "test *-source attributes are not sent" : function() {
      var recordedData, timestamp = new Date().getTime();
      jsHub.dispatchViaForm = function (method, url, data) {
        recordedData = data;
      };
      jsHub.trigger("page-view", {
          "page-name" : "homepage",
          "page-category" : "value 1",
          "page-category-source" : "window.location"
        }, timestamp);
      var expectedEvent = {
        "eventType" : "page-view",
        "timestamp" : timestamp,
        "attributes" : [
          { "name" : "page-name", "value" : "homepage" },
          { "name" : "page-category", "value" : "value 1" }
        ]
      };
      suite.checkRequest(null, expectedEvent, recordedData);
    },

    "test empty page-referrer has correct value" : function() {
      var recordedData, timestamp = new Date().getTime();
      jsHub.dispatchViaForm = function (method, url, data) {
        recordedData = data;
      };
      jsHub.trigger("page-view", {
          "page-name" : "homepage",
          "referrer" : ""
        }, timestamp);
      var expectedParams = {
        "sender" : /^Causata Transport Plugin v[0-9\.]+$/,
        "referrer" : "(direct)"        
      };
      var expectedEvent = {
        "eventType" : "page-view",
        "timestamp" : timestamp,
        "attributes" : [
          { "name" : "page-name", "value" : "homepage" }
        ]
      };
      suite.checkRequest(expectedParams, expectedEvent, recordedData);
    },

    "test multiple events are sent together" : function() {
      var recordedData, timestamp = new Date().getTime();
      jsHub.dispatchViaForm = function (method, url, data) {
        recordedData = data;
      };
      jsHub.trigger("data-capture-start", {}, timestamp);
      jsHub.trigger("page-view", {
          "page-name" : "homepage"
        }, timestamp);
      jsHub.trigger("product-view", {
          "product-name" : "bicycle"
        }, timestamp);
      jsHub.trigger("data-capture-complete", {}, timestamp);
      var expectedEvents = [
        {
          "eventType" : "page-view",
          "timestamp" : timestamp,
          "attributes" : [
            { "name" : "page-name", "value" : "homepage" },
          ]
        }, {
          "eventType" : "product-view",
          "timestamp" : timestamp,
          "attributes" : [
            { "name" : "product-name", "value" : "bicycle" },
          ]
        }
      ];
      suite.checkRequest(null, expectedEvents, recordedData);
    }
  })); 
</script>

