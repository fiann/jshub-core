<% set_title "Google Analytics markup < Data capture" %>

<% content_for :javascripts do %>  

<!-- jsHub dist file -->
<%= javascript_include_tag "/js/src/hub/hub-debug.js" %>
<%= javascript_include_tag "/js/src/debug/debug-debug.js" %>
<%= javascript_include_tag "/js/src/logger/logger-debug.js" %>
<%= javascript_include_tag "jquery/jquery.js" %>
<%= javascript_include_tag "/js/src/samples/samples-google-analytics-markup-debug.js" %>
<%= javascript_include_tag "/js/src/jshub/jshub-debug.js" %>

<% end %>

<% content_for :intro do %>
<p>
  This file tests <strong><a href="http://jshub.org/project/wiki/DataCapture/GoogleAnalyticsMarkup" title="Google Analytics">Google Analytics markup plugin</a> functionality</strong>.
</p>
<p>
  This page tests the logic for extracting values from the html of the page.
</p>
<% end %>

<script type="text/javascript">
// fake GA tracker
window._gat = {
  _getTracker: function() {
    return {
      _trackPageview: function() {
      }
    };
  }
}

window.domReadyFired = false;

$(document).ready(function () {
  window.domReadyFired = true;
})
</script>
<script language="javascript" type="text/javascript">
  /* 
   * Check the browser environment for required JS libraries and other
   * supporting functionality to avoid false test failure results due to
   * mis-configuration, etc
   */
  suite.add(new Y.Test.Case({
    name: "Environment check",
    
    "test required test dependencies": function() {
      Y.Assert.isNotUndefined(window.jsHub, "The jsHub hub is required");
      Y.Assert.isNotUndefined(window.jQuery, "The jQuery library is required");
    },
    
    "test jsHub API dependencies": function() {
      Y.Assert.isFunction(jsHub.bind, "jsHub.bind() is not a Function");
      Y.Assert.isFunction(jsHub.trigger, "jsHub.trigger() is not a Function");
      Y.Assert.isFunction(jsHub.safe, "jsHub.safe() is not a Function");
    }
  }));
  
  /* 
   * Capture the values of the page-view event
   */
  function parse(selector, expectedCount) {
    var data = null, count = 0;
    if (typeof expectedCount != 'number') {
      expectedCount = 1;
    }
    var listener = {
      id : "unittest",
      eventHandler : function(evt) {
    	  count ++;
        data = evt.data;
      }
    };
    jsHub.bind("page-view", listener);
    jsHub.trigger("page-view", { context: selector });
    Y.Assert.areEqual(expectedCount, count, 'wrong number of events fired');
    Y.Assert.isNotNull(data, 'Event had no data');
  	return data;
  };
</script>  


<!-- Any HTML you may require for your tests to work properly -->
<div id="example1">
  <h3>Example 1: no	explicit page name</h3>
  <p>The google tag will record the page URL</p>
  <script type="text/javascript">
    var pageTracker = _gat._getTracker("UA-XXXXXXX-1");
    pageTracker._trackPageview();
  </script>
</div>
<script type="text/javascript">
  suite.add(new Y.Test.Case({
    name: "Capture default (non-specified) page name",
    
    "test pagename not specified": function() {
      var data = parse("#example1");
      Y.Assert.areEqual(window.location.pathname, data['page-name'], 'Page name should default to the window.location.pathname if it is not explicitly stated');
    },
	
	  // unlike hpage plugin the GA plugin defaults to pathname rather than leaving it blank, so it
	  // should explicitly state the source
    "test source metadata is applied to default fields": function() {
      var data = parse("#example1");
      Y.Assert.areEqual('location.pathname', data['page-name-source'], 'name-source is not correct');
    }
  }));
</script>  

<div id="example2">
  <h3>Example 2: explicit page name</h3>
  <p>The google tag will record the name "Test page"</p>
  <script type="text/javascript">
    var pageTracker = _gat._getTracker("UA-XXXXXXX-1");
    pageTracker._trackPageview("Test page");
  </script>
</div>
<script type="text/javascript">
  suite.add(new Y.Test.Case({
    name: "Capture explicit values",
    
    "test pagename explicitly specified": function() {
      var data = parse("#example2");
      Y.Assert.areEqual("Test page", data['page-name'], 'Page name should match the defined value');
    },
	
    "test source metadata is applied to explicit fields": function() {
      var data = parse("#example2");
	    var pluginId = 'google-analytics-markup';
      Y.Assert.areEqual(pluginId, data['page-name-source'], 'name-source is not correct');
    }
  }));
</script>  

<div id="example3">
  <h3>Example 3: error with duplicate page name</h3>
  <p class="hpage">
  	The microformat contains the page name "<span class="name">new name</span>".
  </p>
  <p>
  	The google tag will record the name "Test page".
    This should throw a warning event that the inspector can detect.
  </p>
  <script type="text/javascript">
    var pageTracker = _gat._getTracker("UA-XXXXXXX-1");
    pageTracker._trackPageview("Test page");
  </script>
</div>
<script type="text/javascript">
  suite.add(new Y.Test.Case({
    name: "Check error messages",

    _should: {
      ignore: {
        "test error thrown for duplicate values": true
      }
    },
    
    "test error thrown for duplicate values": function() {
      var errorData = null, errors = 0;
      jsHub.bind("duplicate-value-warning", {
        id : "unittest", 
        eventHandler : function(evt) {
          errorData = evt.data;
          errors++;
        }
      });
      
      var data = parse("#example3");
      Y.Assert.areEqual(1, errors, 'Expected to get a warning about duplicate values');
      Y.Assert.areEqual("new name", errorData.fields.name.previous.value, 'Wrong value in error event from previous plugin');
      Y.Assert.areEqual("hPage-plugin", errorData.fields.name.previous.source, 'Wrong previous plugin source');
      Y.Assert.areEqual("Test page", errorData.fields.name.found, 'Wrong value in error event from GA plugin');
      // and check the real page view event
	    Y.Assert.areEqual("Test page", data['page-name'], 'Page name should contain the last defined value');
    }
  }));
</script> 

<div id="example4">
  <h3>Example 4: javascript mediated event</h3>
  <p>
  	The text contains a <a href="#" onclick="pageTracker._trackPageview('Link click'); window.clickHandlersTriggered=true;">link
	  with tracking</a>, when it is clicked it should be recorded by GA.
  </p>
</div>
<script type="text/javascript">
  var pageTracker = _gat._getTracker("UA-XXXXXXX-1");
</script>
<script type="text/javascript">
  suite.add(new Y.Test.Case({
    name: "Check post-load events",
    
    _should: {
      ignore: {
        "test instrumented links": true
      }
    },
    
    "test instrumented links": function() {
      window.clickHandlersTriggered = false;
	    var data, events = 0;
      jsHub.bind("page-view", {
        id : "unittest", 
        eventHandler : function(evt) {
          data = evt.data;
          events++;
        }
      });
      
      $('#example4 a').click();
  
      Y.Assert.isTrue(window.clickHandlersTriggered, "The onClick handler was not triggered");
      Y.Assert.areEqual(1, events, 'Click should be recorded');
      Y.Assert.areEqual("Link click", data['page-name'], 'Wrong page name in event');	  
    }
  }));
  
</script>
